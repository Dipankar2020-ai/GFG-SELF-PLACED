Given a positive integer value N. The task is to find how many numbers less than or equal to N have numbers of divisors exactly equal to 3.

 

Example 1:

Input:
N = 6
Output: 1
Explanation: The only number less than 6 with 
3 divisors is 4.
Example 2:

Input:
N = 10
Output: 2
Explanation: 4 and 9 have 3 divisors.
 

Your Task:
You don't need to read input or print anything. Your task is to complete the function exactly3Divisors() that takes N as input parameter and returns count of numbers less than or equal to N with exactly 3 divisors.

 

Expected Time Complexity : O(N1/2 * N1/4)
Expected Auxilliary Space :  O(1)


brute force:
class Solution{
    public:
    int check(int n)
    {
        int count=0;
        for(int i=1;i<=n;i++)
        {
            if(n%i==0)
            {
                count++;
            }
        }
        if(count==3)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }

    int exactly3Divisors(int N)
    {
        int sum=0;
        for(int i=1;i<=N;i++)
        {
           if(check(i))
           {
               sum=sum+1;
           }
        }
        return sum;
    }
};

// { Driver Code Starts.


int main()
 {
    int T;
    
    //taking testcases
    cin>>T;
    while(T--)
    {
        int N;
        
        //taking N
        cin>>N;
        Solution ob;
        //calling function exactly3Divisors()
        cout<<ob.exactly3Divisors(N)<<endl;
    }
	return 0;
} 

Efficient Approach:
class Solution{
    public:
    int isprime(int n)
    {
        if(n==0 ||n==1)
        {
            return 0;
        }
        for(int i=2;i*i<=n;i++)
        {
            if(n%i==0)
            {
                return 0;
            }
        }
        return 1;
    }
    int exactly3Divisors(int N)
    {
        int count=0;
        for(int i=1;i*i<=N;i++)
        {
            if(isprime(i))
            {
                if(i*i<=N)
                {
                    count++;
                }
            }
        }
        return count;
    }
};
